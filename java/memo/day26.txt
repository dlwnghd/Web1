Thread 종료 방법

1. 필드에 boolean 타입의 변수를 선언하고, run() 안에 있는 반복문에 해당 변수가 true일 경우
   break를 할 수 있도록 설계한다.
2. sleep(), wait() 그리고 join() 등의 메소드를 통해 쓰레드 일시정지 상태가 되면
   Thread객체.interrupt()를 사용하여 InterruptedException을 발생시킨다.
   이 때 일시정지를 시킨 메소드 부분의 catch를 통해 예외를 잡아주고 원하는 문장을 작성하면 된다. ex) break;
3. 쓰레드를 일시정지 하는 코드가 없을 경우 Thread.interrupted()의 상태를 확인한다.
   Thread객체.interrupt()를 사용하면 Thread.interrupted()의 상태는 true로 변경되고,
   만약 Thread.interrupted()를 두 번 사용하면 두 번째부터는 false 상태로 리턴된다.
4. System.exit(0)를 사용하면 프로세스 종료(전체 쓰레드 종료).
----------------------------------------------------------------------------------------
파일 입출력(Java Application 관점)
	Writer(출력)
		BufferedWriter : 버퍼를 사용한 출력 클래스
		FileWriter : 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
			     전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.
		File : 전달한 경로에 있는 파일의 정보를 담는 타입
		       파일의 유무 검사, 파일 삭제 등

	Reader(입력)
		BufferedReader : 버퍼를 사용한 입력 클래스
		FileReader : 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
			     전달한 경로에 파일이 없다면 FileNotFoundException 예외가 발생한다.
		File : 전달한 경로에 있는 파일의 정보를 담는 타입
		       파일의 유무 검사, 파일 삭제 등
======================================================================================





















