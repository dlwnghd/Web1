함수형 인터페이스(Functional interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상메소드만
	선언할 수 있도록 제한해야한다.

람다식(Lambda Expression)
	이름이 없는 메소드로서 변수처럼 사용이 가능하며, 매개변수로 전달이 가능하다.
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 메소드 이름이 필요없다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열, ...) -> 리턴값;
	2. (매개변수 형식 나열, ...) -> {2개 이상의 문장 작성; return 리턴값;}
-----------------------------------------------------------------------------------------------------------------
[기초 실습]
	1. 함수형 인터페이스(PrintName) 선언
	2. 외부에서 이름(동석)과 성(한)을 전달받는 추상 메소드 선언, 리턴타입은 문자열로 설정
	3. 클래스 선언(PrintNameTest) 후 static 메소드 선언(printFullName)
	4. 외부에서 람다식으로 구현한 값을 매개변수 name으로 전달받기
	5. static 메소드 사용 시, 이름과 성을 연결하여 full name을 println으로 출력한다.

[심화 실습]
	여러 개의 정수를 입력받아서 알맞는 덧셈, 뺄셈 결과를 확인하는 애플리케이션 제작
	
	입력 예1) 7+35-9
	출력 예1) 33

	입력 예2) -9+8+10
	출력 예2) 9

	* 사용자가 정상적으로만 입력한다는 가정 하에 구현하도록 한다.
	* 두 정수를 전달받은 후 int로 리턴하는 calc 추상메소드 선언(함수형 인터페이스 제작)
	* 두 정수의 덧셈, 뺄셈을 구해주는 함수형 인터페이스를 리턴하는 static 메소드 선언(람다식 리턴)
	* 전체 식을 전달받은 후 String[]로 리턴하는 getOpers 추상메소드 선언(함수형 인터페이스 제작)
	* main메소드에서 gerOper를 람다식으로 구현
	* 첫번째 정수가 음수일 경우 오류 해결하기
	* split()사용 시 '+' 등은 정규식 문법으로 인식하기 때문에 '\\+'로 사용하여 '+'문자로 인식하도록 한다.

















