예외 처리
   에러 : 심각한 오류
   예외 : 덜 심각한 오류

예외 처리 문법
   try{
      예외가 발생할 수 있는 문장

   } catch(예외이름 객체명){
      //예외 발생 시 해당 예외 필드가 메모리에 할당된다.
      //할당된 주소를 선언한 객체로 받지 못한다면 프로그램이 강제 종료된다.
      //이를 막기 위해 동일한 예외타입의 객체를 선언하여 catch문 안의 문장으로 대체되도록 구현한다.
      예외 발생 시 실행할 문장
   
   } catch(ArrayIndexOutOfBoundsException e){
      예외 발생 시 실행할 문장
      //e 객체를 통해 다양한 예외 상황 및 상태를 확인할 수 있다.
      e.printStackTrace(); //오류가 발생한 소스코드의 라인번호를 출력해준다.

   } catch(Exception e){
      //모든 예외의 부모 클래스가 Exception이고,
      //어떤 예외가 발생하더라도 Exception(부모)타입이기 때문에
      //모든 예외를 다 담을 수 있다.
      예외 발생 시 실행할 문장
   }
   ...
   } finally {
      예외 발생 여부에 상관없이 무조건 실행할 문장
      ※ 외부 장치와 연결했을 경우 다시 닫을 때 주로 사용한다.
   }

예외 처리를 사용하는 이유
   






