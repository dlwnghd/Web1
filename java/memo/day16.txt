모호성(ambiguity)
   하나의 자식이 여러 부모를 상속받을 때 부모 필드에 동일한 이름의 필드가 있다면,
   어떤 부모의 필드인지 알 수가 없다. 이를 모호성이라고 부른다.

모호성 해결방법
- 상황1:   두 개의 인터페이스 내에 같은 이름과 매개변수의 메소드가 선언되어 있다.
- 해결:   자식 클래스에서 재정의하여 사용한다.

- 상황2: 부모 클래스의 메소드와 인터페이스의 디폴트 메소드의 이름, 매개변수가 같다.
- 해결:   부모 클래스의 메소드가 사용된다.
-----------------------------------------------------------------------------------
※ 인터페이스도 타입이다.
※ 인터페이스는 부모이며, 구현한 클래스가 자식이 된다.

마커 인터페이스(Marker Interface)
   클래스들을 그룹화하기 위한 목적으로 사용한다.
   인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입이므로
   마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다.
----------------------------------------------------------------------------
내부 클래스(inner class)
   하나의 클래스에서 a작업과 b작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
   클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며,
   안에 선언된 클래스를 내부 클래스라고 한다. 외부 클래스가 메모리에 할당되어야 내부 클래스를
   객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
   이를 캡슐화 또는 은닉화라고 부른다. 내부 클래스는 외부 클래스의 필드이기 때문에 외부 클래스의
   필드를 자신의 필드처럼 가져다 사용할 수 있게 된다.
   ※ 메소드 안에서 클래스를 선언할 수도 있다.

익명 클래스
	이름이 없는 클래스임 구현되지 않은 필드를 구현하기 위해 일회성으로 생성되는 클래스이다.
----------------------------------------------------------------------------




















