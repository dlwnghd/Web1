연산자
   기능이 있는 특수문자

연산자의 우선순위
   최우선 연산자
   단항 연산자
   산술 연산자
   쉬프트 연산자
   관계 연산자
   논리 연산자
   삼항 연산자
   대입 연산자


연산자의 결합성
   하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

비트 연산
   논리 연산자
      & (AND, 논리곱) : A & B, 두 비트 모두 1이면 1
      | (OR, 논리합) : A | B, 둘 중 하나라도 1이면 1
      ^ (XOR, 배타논리합) : A ^ B, 두 비트가 서로 다르면 1

   단항 연산자
      ~ (NOT, 논리부정) : ~A, 0을 1로, 1을 0으로 변경, ~a = -a - 1

      *부호비트
         비트의 최상위 비트를 부호비트로 사용하고, 0은 양수, 1은 음수를 의미한다.


   쉬프트 연산자(이동)
      <<(LEFT SHIFT, 좌쉬프트) : A << B, A를 B만큼 좌로 비트이동
      >>(RIGHT SHIFT, 우쉬프트) : A >> B, A를 B만큼 우로 비트이동
      
      * 비트가 넘어가면 잘리고, 빈 칸은 0으로 채워진다(음수는 1로 채워진다).
------------------------------------------------------------------------------------
조건식
   결과가 참 또는 거짓, 둘 중 하나가 나오는 식
   참 또는 거짓 값

참과 거짓 값
   참 : true
   거짓 : false

논리형
   boolean      1byte      true, false

조건식에서 사용되는 연산자
   관계 연산자
      == : 같다
      != : 같지 않다.
      >, < : 초과, 미만
      >=, <= : 이상, 이하

   논리 연산자 : 두 개 이상의 조건식을 연결해줄 때
      &&(AND) : A && B, 두 조건식이 모두 참일 때 참
      ||(OR) : A || B, 두 조건식 중 하나라도 참이면 참

   단항 연산자
      !(NOT) : !A, 조건식 참이면 거짓으로, 거짓이면 참으로 변경

   삼항 연산자(통채로를 값으로 봐야한다)
      ?:
      조건식 ? 참 : 거짓
      int result = 10 > 9 ? 10 : 9;
      단, 참과 거짓 자리에는 값만 작성할 수 있다.

삼항 연산자를 사용하는 이유
   하나의 조건식의 참, 거짓의 판별을 위해 사용한다.
--------------------------------------------------------------------------------
제어문
   조건문

if문
   if(조건식){
      실행할 문장;
   }
   위의 조건식에 상관없이 무조건 모두 검사
   if(조건식){
      실행할 문장;
   }
   if(조건식){
      실행할 문장;
   }
**********************************************************************
   if(조건식){
      실행할 문장;
   }
   위의 조건식이 참이면 검사하지 않고, 거짓일 때에만 검사한다.
   else if(조건식){
      실행할 문장;
   }
   ...
   }
   else {
      실행할 문장;
   }


switch문
	switch(변수명){
	case 값1:
		실행할 문장;
	case 값2:
		실행할 문장;
	case 값3:
		실행할 문장;
	case 값4:
		실행할 문장;
	...
	default:
		실행할 문장;
	}
	break;

























