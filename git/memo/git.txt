버전 관리 시스템
   원하는 시점(버전)으로 이동할 수 있으며, 각 버전별로 여러 개발자가 협업할 수 있는 최적의 환경을 제공하는 시스템

SVN
   작업내역 커밋 시 변경사항과 히스토리가 즉시 서버로 전송되기 때문에 관리가 용이하다.
   또한 간단한 설치와 사용방법으로 별도의 교육 없이 초보자도 쉽게 사용할 수 있다.
   하지만 항상 원격 저장소(SVN 서버)를 필요로 하며 서버간 버전 관리가 힘들다.

Git(분산형 버전 관리 시스템)
   SVN이 가지고 있던 클라이언트와 서버 간의 버전 관리 문제를 많이 보완해준 시스템.
   서버 뿐만 아니라 로컬에서도 버전 관리가 가능하며, 로컬이 서버가 될 수 있고, 서버도 로컬이 될 수 있다.
   브랜치라는 개념을 사용하여 개발자 마음대로 로컬 환경에서도 커밋과 버전 관리가 가능하다.


Git-Hub(분산형 버전 관리 공유 서버)
   Git으로 관리하는 프로젝트를 호스팅 사이트 중 하나이다.
   로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다.

Git 설치
   git 검색 > 최신버전(2.33.0.2) 다운로드 > Next > C:\Git > Next > Next > Next
   > Use Vim > Let Git decide > Git from command line and also.. > Use bundled OpenSSH
   > Use the OpenSSL library > Checkout Windows-style,... > Use MinTTY > Default > 
   > Git Credential Manager Core > Enable file system caching > Install
----------------------------------------------------------------------------------------------
저장소의 종류
   - 로컬 저장소(local) : 개인 전용
   - 원격 저장소(remote): 공유 전용

작업 트리(Work-Tree)
   폴더 또는 디렉터리를 의미한다.

스테이징 - add
   작업 트리를 커밋하기 전, 작업 트리의 파일 상태를 기록하는 임시 공간(인덱스)에 올리는 작업.
   커밋하기 전 반드시 커밋할 내용은 인덱스에 추가되어야 하며, 이를 스테이징이라고 한다. 
   변경한 모든 파일을 커밋하지 않고, 원하는 파일만 골라서 스테이징을 하게 되면
   인덱스에 등록된 파일들만 커밋된다. 스테이징하지 않은 파일들은 커밋이 될 수 없다.

커밋 - commit
   새로운 버전을 만들 때 사용한다.
   예를 들어 A와 B라는 파일을 하나의 버전으로 관리하고자 할 때 커밋을 사용한다.
   커밋 시 고유한 커밋 아이디가 부여되며, 원하는 버전으로 돌아갈 때 커밋 아이디 중 앞 7글자를 사용한다.

체크아웃 - checkout
   원하는 버전 또는 브랜치로 이동하고 싶을 때 사용한다.
   체크아웃 명령어 뒤에 커밋 아이디 전체 또는 앞 7글자를 작성하면 해당 버전으로 이동하게 된다.

브랜치(Branch)
   한 개의 저장소를 여러 갈래로 나누어 관리할 수 있다.
   각각의 독립된 Branch에서는 각각의 개발자들이 기존 버전과 비교를 하거나
   버그를 테스트하는 등 협업을 위해 필요한 목적으로 사용할 수 있다.
   커밋을 통한 버전 관리는 한 가지의 커밋 히스토리 경로를 가지지만
   브랜치를 나누면 커밋 히스토리를 여러 경로로 나누어 사용이 가능해진다.

푸쉬 - push
   로컬 저장소에 커밋한 파일들을 원격 저장소에 추가하는 명령어이다.

풀 - pull
   원격 저장소에 있는 파일들을 로컬 저장소로 전달받는 명령어이다.

클론 - clone
   원격 저장소에 있는 파일들을 새로운 로컬 저장소로 복사하여 전달받는 명령어이다.
----------------------------------------------------------------------------------------------
현재 작업트리를 Git에 등록

   git 폴더 생성 > firstProject 폴더 생성
   firstProject 우클릭 > Git Bash Here 클릭
   
   $git init
   
버전관리를 위한 내 정보 등록하기 - Git-Hub에 등록된 계정의 정보와 동일하게 작성
   $ git config --global user.email "bugbugcoding@gmail.com"
   $ git config --global user.name "bugbugcoding"
   $ git config --list
   
버전 설명 파일 작성
   firstProject 안에 README.txt 파일 생성
   > "커뮤니티 게시판 첫번째 버전입니다." 내용 입력
   
버전 추가
   $ git add README.txt
   $ git status
   $ git commit -m "버전 설명 추가"

커밋 설명 수정
   $ git commit --amend
   i > 내용 수정 "커뮤니티 게시판 버전 설명 추가" > esc > wq

커밋 로그
   $ git log
   $ git log --pretty=oneline
   
버전 설명 파일 수정
   firstProject 안에 README.txt 파일 내용 수정
   > "커뮤니티 게시판
      기본 CRUD가 가능한 게시판"

스테이징, 커밋 한번에 처리
   $ git commit -am "버전 설명 수정"
   
이전 버전으로 돌아가기
   $ git log
   $ git checkout [커밋아이디]
   
최근 버전으로 돌아가기
   $ git checkout -

-------------------------------------------------------------------------------------------

원격 저장소(remote - Repository) 만들기
   github.com 로그인 > Repositories 상단 탭 클릭 > 우측 New 클릭 
   > Repository name : firstProject
   > Discription : 커뮤니티 게시판
   > Public 체크
   > README.md 체크 해제 (md는 텍스트 파일이며, 마크다운을 의미한다)

원격 저장소 연결
   $ git remote add [원격 저장소 이름] [원격 저장소 URL]
   $ git remote add origin https://github.com/bugbugcoding/firstProject.git
   $ git remote
   $ git remote -v

   *fetch : 자동으로 병합되지 않고, 수정된 파일을 직접 보며 수동으로 병합한다.
    원본 내용과 변경된 내용의 차이를 알 수 있으며, 실수를 최소화 해야 할 때에만 사용한다.
    확인 후 병합은 직접 해주어야 한다.
    
원격 저장소에 로컬 저장소 올리기
   $ git push [원격 저장소 이름] [브랜치 이름]
   $ git push origin master
   
   *returned error: 403
    이미 다른 계정으로 PC에 로그인된 상태이다.
    제어판\사용자 계정\자격 증명 관리자 > Windows 자격 증명 클릭
    > git:https://github.com 삭제
    
    $ git push [원격 저장소 이름] [브랜치 이름]
    > 브라우저 로그인 클릭
    > Authorize GitCredentialManager 클릭
    > Authentication Succeeded
    
원격 저장소를 로컬 저장소로 복사하여 받기(init 하면 안됨!)
   git 폴더에 firstProject_v1 폴더 생성
   firstProject_v1 폴더 우클릭 > Git Bash Here 클릭
   
   $ git clone [원격 저장소 URL] [다운받을 경로]
   $ git clone https://github.com/bugbugcoding/firstProject.git .
   
변경된 내용 커밋
   README.txt 내용 변경 
   "
      커뮤니티 게시판 첫번째 버전입니다.
      게시글 전체 폰트 변경

      개발자 목록
      1. 한동석
      2. 홍길동
      3. 이순신
   "
   
   firstProject_v1 Bash창에서 작성
   $ git commit -am "개발자 목록 추가"
   $ git push origin master

변경된 내용 받기
   firstProject Bash창에서 작성
   $ git pull origin master

-------------------------------------------------------------------------------------------

소스트리 설치
   GUI 환경으로 Git 서비스 제공
   https://www.sourcetreeapp.com/
   
로그인
   Bitbucket 클릭
   > email, username 작성
   > Sourcetree창에서 뒤로 클릭 > Bitbucket 클릭
   > Grant access 클릭
   > Mercurial 체크 해제 > 다음 > 다음
   > SSH키 아니오 클릭
   
Git-Hub 연결
   계정명 우클릭 > 계정 편집
   > 호스팅 서비스 : GitHub
   > OAuth 토큰 새로 고침
   > Authorize 클릭 > 확인
   ※ 계정 연동이 안될 시 전부 삭제 후 다시 계정 추가 하기
   
Clone
   원격 저장소를 내 컴퓨터에 받아오고 소스트리에도 추가
   로컬 저장소는 자동으로 생성된다.

Add
   이미 만들어진 로컬 저장소를 소스트리에 추가

Create
   새로운 로컬 저장소를 생성한다.
   git init과 동일하다.

로컬 저장소 소스트리에 추가
   Add 클릭 > 탐색 > git 폴더에 firstProject 선택 > 추가
   새 탭 > Add > 탐색 > git 폴더에 firstProject_v1 선택 > 추가

md파일 만들기(git/firstProject)
   새 텍스트 문서 생성 > community_board_list.md 로 이름 변경 >
   "
      1. 안녕하세요 반갑습니다.
      2. 혹시 이거 아시는 분?
   "
   
   새 텍스트 문서 생성 > community_reply_list.md 로 이름 변경 >
   "
      # 댓글 목록

      1. 좋은 글 잘 봤습니다.
      2. 이 분 글이 제일 명확함.
   "

소스트리 스테이징 및 커밋
   커밋하지 않은 변경사항 클릭 > 커밋 클릭 > 도시락 버튼("대기 중인 파일, 파일 상태순 정렬" 오른쪽) > 스테이지 뷰 나누기
   > 스테이지에 올라가지 않은 파일 목록에서 community_board_list 오른쪽 + 버튼 클릭
   > community_reply_list 도 + 버튼 클릭
   > 창 하단에 커밋 메세지 작성 > "게시글 목록, 댓글 목록 추가"
   > 창 우측 하단에 커밋 버튼 클릭
   *History에서 master는 로컬 저장소 버전을 의미하고, origin/master는 원격 저장소의 현재 버전을 의미한다.
    로컬 저장소와 원격 저장소의 버전이 다른 것을 확인할 수 있다.
    
원격 저장소에 push하기
   push 버튼 클릭 > master 체크 > Push버튼 클릭
---------------------------------------------------------------------------------------------------------
브랜치
   한 개의 처리 경로를 여러 개의 처리 경로로 나눌 때 사용한다.
   보통 동시에 버전 관리를 해야 할 때 사용하며,
   기본 브랜치는 master(지금은 main)이고, 각각의 브랜치는 현재 버전에 대한 커밋을 가리키고 있다.

   1. 커밋3 상태에서 hds 브랜치 생성

                   [master]
                 ↓
      커밋1 ------ 커밋2 ------ 커밋3
                 ↑
                    [hds]

   2. hds 브랜치에서 커밋4 진행
   
                   [master]
                 ↓               
      커밋1 ------ 커밋2 ------ 커밋3 ------ 커밋4
                          ↑
                           [hds]

   3. master 브랜치에서 커밋5 진행

                       [master]
                       ↓
                 ┌------ 커밋5
      커밋1 ------ 커밋2 ------ 커밋3 
                 └------ 커밋4
                           ↑
                         [hds]   

   4. [HEAD] 포인터의 역할
      브랜치 혹은 커밋을 가리키는 포인터이며, [HEAD]를 통해 현재 커밋 상태를 표시해준다.
      또한 최신 커밋이 아닌 과거 커밋으로도 이동할 수 있다.
   

                       [master]
                       ↓
                 ┌------ 커밋5
      커밋1 ------ 커밋2 ------ 커밋3 
                 └------ 커밋4
                           ↑
                         [hds]
                    [HEAD]





















